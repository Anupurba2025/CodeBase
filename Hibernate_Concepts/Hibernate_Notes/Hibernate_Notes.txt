Hibernate Object States / Persistence Life Cycle
--------------------------------------------------------------------------------------------------------------------------------------------------------

ORM -> Object Relational Mapping -> its a concept which is telling that how persistently we can map the relational data base with the objects.

For the implementation purpose we are having some ORM tools such as Hibernet, toplinc,iBatis,hibertest...one of the best orm tool is hibernate. it does the mapping in between object world and relational world.

---------------------------------------------------
Pre-Requisite
JAVA, SQL Concepts, JDBC...
----------------------------------------------------

Hibernet is used for persistent the data...
We use database to store the data's, and that concept of storing the data is called persistence..

To connect our java application with database we are using JDBC.

We are introducing a new concept where we can store the data into the database without writing any sql queries.


-------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------

EXAMPLE
Suppose we are having one class..
class student {
	roll no,
	name,
	marks;
}


Now we are creating two objects of class student..
obj1 (1,Navin,80);
obj2 (2,Arti,90);

Now without writing any sql query we want to insert into a table, for that we are using the concept of ORM, and to implement ORM we are using ORM tools which is Hibernet... now the column structure of a table is same as structure of the Student class. Each object is store as a new row of the table.. to save / insert it into the table we are using s.save(obj);

Now s is the object of Session,
Session s = new Session();

Now to create a Session we are creating the object of SessionFactory.
In SessionFactory we are giving that configuration portion of your database.

We have different types of configuration process..
we have XML, Java configuration.

By creating an object of Session we can
save the data through s.save();
fetch the data through s.get();

--------------------------------------------------------------------------------------------

The format is ->
Configuration con = new Configuration().configure().addAnnotatedClass(ClassName.class);
SessionFactory sf = con.buildSessionFactory();
Session s = sf.openSession();

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------

To install Hibernate plugins for the project

STEP 1 - Go to File > Settings (or IntelliJ IDEA > Preferences on macOS).
STEP 2 - In the left sidebar, select Plugins.
STEP 3 - In the Marketplace tab, type "Hibernate" in the search bar.
STEP 4 - Look for the JPA or Hibernate plugins (Hibernate support is often part of JPA or Java EE tools).
STEP 5 - Click Install next to the Hibernate or JPA plugin.
STEP 6 - Restart IntelliJ IDEA if prompted.

Enable Hibernate Support in Your Project:

Right-click on your project in the Project view.
Go to Add Framework Support....
Select Hibernate from the list and click OK.

--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------

CONFIGURING HIBERNATE.CFG.XML FILE

cfg. xml. This file contains information for creating the Hibernate session factory. It is where we will specify the driver to be used, its connectivity information, the appropriate database dialect and what objects will be mapped.

HOW TO CONFIGURE HIBERNATE.CFG.XML FILE
---------------------------------------

STEP 1 - Under src/main create one folder name resources (if not exists)
STEP 2 - create one file, default name should be hibernate.cfg.xml
STEP 3 - in the xml file specify the type of Doc

<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

STEP 4 - Specify the Database Connection settings..
	
<hibernate-configuration>
    <session-factory>

        <!-- JDBC Database connection settings -->
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/Database_Name</property>
        <property name="hibernate.connection.username">UserName</property>
        <property name="hibernate.connection.password">Password</property>

        <!--HERE WE NEED TO SPECIFY THAT WE DONT HAVE TABLES SO HIBERNATE NEEDS TO CREATE A TABLE-->

	
	//It creates table for the all Entity classes
	<property name="hbm2ddl.auto">create</property> 

	//If the Table is not present it simply create it or else if it exists then it didn't replace the existing table.
	<property name="hbm2ddl.auto">update</property>


    </session-factory>
</hibernate-configuration>

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


@Annotations
-------------

@Entity - The @Entity annotation is used to mark a class as a persistent entity in the Java Persistence API (JPA).

@Id - The @Id annotation is used in Java to mark a field as the primary key of an entity. 

@Entity(name = "aliens_table")
public class Alien {}
we are having three different Entities here, 
1. class name
2.Entity name
3. table name

-> class named Alien, and the Entity named aliens_table, so by default in the database the table will created with name alien_tables.

now if we dont want to give any Entity name but want to different table name then we can use different Annotation

@Entity
@Table(name="alien_table")
public class Alien{}

NOTE - 
Entity and Table are two different concept, the only thing is table name is derived from Entity name when we run the code....

@Column(name="alien_color") 
 private String color;
-> It helps to change the column name.

@Transient
-> if we are using this Annotation before any column then the value for that column should not be stored in the database.

@Embeddable 
-> This annotation in Hibernate is used to indicate that a class should be embedded within another entity.
In simple words we acn say that instead of having a new table we can embedding one table inside the existing table.. As we are embedding into the existing table there is no need to add the @ID because it didn't have any primary keys into it.


@OnetoOne 
-> This annotation in Hibernate is used to create a one-to-one association between two entities. 
------------------------------------------------------------------------------------------------------------------------------------------------------

HOW TO FETCH THE DATA USING HIBERNET

To fetch the data first thing we can do is we are using toString() methods. By default toString() methods are fetching the hash codes.

object_of_class = (Alien)session_object.get(className,primary_key_value_which you want to fetch);

e.g. => a =  s.get(Alien.class,1);

get() method will give you the object of Object, so we need to typecast it into Alien to have the object of Alien.


------------------------------------------------------------------------------------------------------------------------------------------------------

HOW TO CREATE EMBEDDABLE OBJECTS / FIELDS


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Hibernate Relations
-------------------
-> one to one
-> one to many
-> many to one
-> many to many


For Example,
Let suppose we have two tables..

CASE 1 -
This is the case where one student has only one laptop.
@Entity
public class Laptop{
     @ID
    private int lid;
    private String iname;
	
	//Getter and Setter

}

@Entity
public class Student{
     @ID
     private int rollNo;
     private String name;
     private int marks;

	//Getter and Setter
     
     //WE can have the object of Laptop here,and to build the relation we can use this @OneToOne Annotation.

     @OneToOne
     private Laptop laptop;

}

CASE 2 :
If one Student has multiple Laptops

@Entity
public class Student{
  @ID
     private int rollNo;
     private String name;
     private int marks;

     //Getter and Setter

     @OneToMany
     private List<Laptop> laptops;
}
But here we got an error...lets thinks about the schema structures of the table..

Laptop					STUDENT
----------------------		--------------------------		

lid		lname		rollNo	 name	marks 	lid
----------------------		----------------------------
101		DELL		1	ANU	99	101
----------------------		----------------------------
102		HP		2	Ranu	89	102
----------------------
103		Mac
----------------------
This is the scenario of one to one, one student has only one laptop..

Now in case of one to many where one student has multiple laptops then if we are creating like this..

Laptop					STUDENT
----------------------		--------------------------		

lid		lname		rollNo	 name	marks 	lid
----------------------		----------------------------
101		DELL		1	ANU	99	101
----------------------		----------------------------
102		HP		2	Ranu	89	102
----------------------		-----------------------------
103		Mac		1	ANU	99	103
----------------------

So The RollNO should repeat, as roll no is a primary key of the student table so it did not work.. 
To work with it we can create one relation table called Student_Laptop

Laptop					STUDENT
----------------------		--------------------------		

lid		lname		rollNo	 name	marks 	
----------------------		------------------------
101		DELL		1	ANU	99
----------------------		------------------------
102		HP		2	Ranu	89	
----------------------
103		Mac
----------------------


STUDENT_LAPTOP
-------------------
rollNo        lid
---------------------
  1            101
  1            103
  2            102

But Instead of creating another new table we can do this in such a way...

Laptop						STUDENT
----------------------				--------------------------		

lid		lname	     rollNo		rollNo	 name	marks 	
------------------------------------		------------------------
101		DELL	     	1		1	ANU	99	
------------------------------------		------------------------
102		HP		2		2	Ranu	89
------------------------------------
103		Mac	        1
------------------------------------
	      

But how it will work because student class knows that it has laptop, but how can the Laptop class knows that it has Student, so for that we need to create an object of Student in the Laptop class.

@Entity
public class Laptop{
     @ID
    private int lid;
    private String iname;
	
	//Getter and Setter

    @ManyToOne
    private Student student;

}

@Entity
public class Student{
  @ID
     private int rollNo;
     private String name;
     private int marks;

     //Getter and Setter

     @OneToMany
     private List<Laptop> laptops;
}


Now we are using @oneToMany in Student and using @ManyToOne in Laptop.
Now as we mention, so we have to mention that mapping has been done by the Laptop class.

For that we need to use..
@OneToMany(mappedBy"field_name");


So the Final version of code is -

@Entity
public class Laptop{
     @ID
    private int lid;
    private String iname;
	
	//Getter and Setter

    @ManyToOne
    private Student stud;

}

@Entity
public class Student{
  @ID
     private int rollNo;
     private String name;
     private int marks;

     //Getter and Setter

     @OneToMany(mappedBy"stud")
     private List<Laptop> laptops= new ArrrayList<>();
}


Now came to the next concept which is @ManyToMany
where Multiple Student has multiple laptop and multiple laptops has multiple Student.
@Entity
public class Laptop{
     @ID
    private int lid;
    private String iname;
	
	//Getter and Setter

    @ManyToMany
    private List<Student> stud= new ArrrayList<>();

}

@Entity
public class Student{
  @ID
     private int rollNo;
     private String name;
     private int marks;

     //Getter and Setter

     @OneToMany
     private List<Laptop> laptops = new ArrrayList<>();
}

------------------------------------------------------------------------------------------------------------------------------------------------------
DIFFERENT TYPE OF FETCH TECHNIQUES

-> EAGER AND LAZY
Fetch Type decides on whether or not to load all the data that belongs to associations as soon as you fetch data from parent table. Fetch type supports two types of loading: Lazy and Eager. By default, Fetch type would be Lazy.

Difference between FetchType LAZY and EAGER in ...

LAZY: It fetches the child entities lazily i.e at the time of fetching parent entity it just fetches proxy(created by cglib or any other utility) of the child entities and when you access any property of child entity then it is actually fetched by hibernate. EAGER: it fetches the child entities along with parent.

------------------------------------------------------------------------------------------------------------------------------------------------------
HIBERNATE CACHING
One of the feature of hibernate is Hibernate Catching. Whenever we want to access the same data for multiple times, instead of hitting your database everytime you can use use cache.

For Example,
Let suppose under a session we are fetching the data from the database, and again under same that same session if we are trying to fetch the same data, then we are using cache which is stored by Hibernate and called as First Level Cache.

But if we are having two different session and for each we try to fetch the same data, it will hit the database for two times... and hibernate will say you didn't use the first level cache here so it will generate second level cache.

let say i want to use the second level cache, it doesn't matter how many session you have all the session in the same application can have the second level cache..
HIbernate not give you this by default. To configure it you need to configure some third party libraries. Either we can use 
-> ehcache
-> os cache
->swarm

NOTE : Everyone preferred to go for ehcache.
----------------------------------------------------------------------
Now if we are talking with how ehcache works..

For this we need to configure some fields..
-> configure pom.xml
[We need to download the ehcache library from maven repository] -this will provide the features.
->We need to download the jar file named hibernate-ehcache = this will provide the integration of eh and hibernate.

->configure hibernate.cfg.xml file.
in this by default the second level cache will be unenabled, we need to enable it.

-> We need to change our Entity because by default not every Entity is cacheable. So we need to provide two annotation for that
-> @cacheble
-> @cache

Through @cacheble we will tell that it will enabled for caching.

Every session has its own First_Level cache...
whileworking with 2nd level cacahe we need to make sure that hibernate-ecache version should be same as the version of hibernate we are working with.


Before your Entity class you need to mention the annotation @Cacheble which allow to get catched.
------------------------------------------------------------------------------------------------------------------------------------------------------
HQL - HIBERNATE QUERY LANGUAGE
--------------------------------
In SQL we are writing a query like
select rollNo from student.
[Here rollNo is the column Name and student is the Table Name.]

In HQL Query we are writing a query like
select rollNo from Student
[Here rollNo is the property and Student is the class name]

If we want to fetch the whole table the
HQL Query - from Class_Name
	e.g. from Student

We can also use join groupBy, orderBy..

NOTE - When we are dealing with the java and database and linked them with the help of jdbc then we are using ResultSet to store the data, and to fetch it we are using while loops.

ResultSet rs = st.executeQuery(sql;)
while{
}

But when we are using HQL, we are having List of Objects
List<Student>st = query.list();
for(Student s:st){
	System.Out.println(s);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
Hibernate Object States / Persistence Life Cycle


We have two things in java for sure. Whenever we are creating a object that a new object.whenever your object is created you either nullified it or assign the garbage values.

in between this if we put hibernate then it has its own state,
The moment i create an object,in hibernate it will be in a transient state.

Transient state means whenever we do any modification with the object and you set any value, the moment you close the application or you can destroy the application you will loose that data.if you want to get your data back then you have to make sure that the data should be persisted. that's why we are having second state.that is persistent State.

When we use methods like save();, or Persistent(); your object will automatically goes into persistent state.In Persistent state whatever you do with your object that changes are also made in the database.There is a direct linkage in between your java object and database. So everytime if you modify anything that will be applicable for your database as well.

The next step will be Detached. We can use detach(); method to do that.. And the moment we can do that our object is moved from persistent state to detouched state.

Now if we want to Removed data from the database then we can use remove(); method...

Let suppose when you are not creating a new object, or dont want to save it, yo simply fetch the data, the moment we called methods like get(); or find(); then it automatically your object goes into the Persistent State.

All the Object is eligible for the garbage collection.
From Transient state -> garbage
     Removed State -> garbage
     Detached State ->  garbage

From Detached method we can also goes into Persistent method as well with the help of save(); or update() method.


new state -> Transient State -> garbage
                |
	      Persistent -> Removed
		|
	      Detached

------------------------------------------------------------------------------------------------------------------------------------------------------

Difference Between get and load method in hibernate.
-----------------------------------------------------
Laptop lap = session.get(Laptop.class,ID) 
Laptop lap1 = session.load(Laptop.class, ID)

get(); and load(); both the methods helps to fetch the data from database.
The main difference comes in the perspective of Performance and the type of exception throws.

Laptop lap = session.get(Laptop.class,ID)
Everytime you will use the get() method, it will hitting to the database. IT files a query.

Laptop lap1 = session.load(Laptop.class, ID)
In case you are using load() method it didn't hit the database. it didn't file any query.

But as you use the object then it will file a query in case of load method.
Laptop lap1 = session.load(Laptop.class, ID); //proxy object
System.out.println(lap1);

That means untill you use that object load will ive you the proxy object.

When your object is depends on some other objects.
For example to make a object of a Student you need a object of Laptop because every Student has a laptop. In that scenario we can use the method load();

Normally to fetch the data we are using get() method in general.

Now in terms of Exception also we are having some difference in between get() and load()->
Suppose we are trying to fetch a Id which is not present..so it throws null point exception.
Laptop lap = session.get(Laptop.class, 101); //NullPointException
System.out.println(lap);

Now if we are using load in the same scenario then it will throw Object not found exception.
Laptop lap1 = session.load(Laptop.class, ID); //ObjectNotFoundException
System.out.println(lap1);
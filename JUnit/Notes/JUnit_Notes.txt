Testing vs Unit Testing..

testing is something which is referring to post development by some test engineers or tester. it's a traditional way to test.

unit testing is also tell about the testing of an application ,unit of functions which is done by software developer itself.

software development life cycle
-> designing
-> develop with code
->testing(usually done by test engineer after post development)


Unit Testing framework(JUnit)
=> Prepare(set up Environment with test methods)
=> provide testing input
=> Run the test
=> Provide expected output
=> perform Assertion(verify the result)
=> Report test results (Alert developer if test is failed or passed)

@Test
=> Applied over methods to mark method as test.
=> This test annotation which we are going to use is present inside a      package named as-> org.junit.jupiter.api <- and Jupiter.api came into picture from JUnit 5.
=> visibility of @Test Annotation method can be public ,protected,  default...
=> Also, informs test Engine what methods need to run...

Assertions
Explanation vs Actual output(Reality)
if -> Exception == Actual o/p => Test case
else -> Exception != Actual Output => Testcase == fail

its a static method 
eg :- asserEquals(expectation , actual)
      assetArrayEquals(expectation , actual)

It's comes under the package org.junit.jupiter.Assertions class =>
It supports feature of java 8(Lambda Exp, Stream Api)...

Write Test then Code => Test Driven Development...

Assertion -
=> assertArrayEquals() method
	=> Numbers of element should match
	=> Elements of an array are equal
	=> Order of elements in an array should be same
   If it satisfy three of this scenario then only it can passed the test case or else the test case is failed....

in asserEquals we need to check for three of this conditions.

assertThrows(expectedType,executable)=>

let suppose we are having some test cases where we are expecting some Exceptions to generate then in that scenario we can use this assertThrows().. here to invoke a particular method we can use lambda expression.

if we are using assertThrows() then if the invoked method generates an Exception then only test case is passed other wise test case will fails.

Testing the Performance of the Unit
Whenever we are having the longer running task or longer running unit, may be it takes lot of time to perform we may have to test the performance of that particular unit.
to do that we can use => assertTimeout(timeout,supplier);


@BeforeEach Annotation

In a test class, let suppose we have different tests, now for each we want to do same task before entering to that test.. for example let suppose before entering into new test method every time we need to create the instance of the java class, so if we create one method, and create a instance of the class into it, and  before that method if we are using @BeforeEach annotation then before entering to a test method it creates a instance of a class.


@AfterEach Annotation

In a test class, let suppose we have different tests, now for each we want to do same task after entering to that test.. for example let suppose after successful competition of every task we want to close all the resources related to that test then we can simply use one method and before it we can use @AfterEach Annotation... 

Life Cycle of this process...
object or instance of the class getting executed that means constructor is called, Before invoking the test cases it invokes that method before which we are using @BeforeEach annotation..
then it will execute the test method then it will invoke that method before which we are using the @AfterEach method..


@BeforeAll and @AfterAll Annotation

If we can use @BeforeAll annotation normally then it will generate exception, because @BeforeAll can be use for static methods only. And if it is  a static method then it will be independent of instance. It will execute before all the test start to be executed.. And it will be executed once before all the test cases...

For example Database Connection is common for all the test methods, so in that scenario we can put that database configuration under that static method before we are using @BeforeAll Annotation.

@AfterAll- it also working for static method only. And it also executed once after all the test cases...
it independent of object and class as they are a static methods...

In JUnit 4 instead of using @BeforeAll and @AfterAll annotation we are using @BeforeClass and @AfterClass annotation.

The default behavior with which @BeforeAll it will working is how many test cases we have that many instances will be created...If we are having 5test class with @Test annotation then for 5 times the constructor will be invoked whenever instance of the object will create.

@TestInstance()

To change the behavior of test instances..
we have two option
@TestInstance(TestInstance.Lifecycle.PER_METHOD) -> it will comes by default.. For every test method the instance will be created. Even if we don't specify it still it takes by default.

If we have 100 test method then for 100 instance will be created.

If we don't want that then simply we can use PER_CLASS
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
Now in that scenario the instance will be created only once.

If we are using @TestInstance(TestInstance.Lifecycle.PER_CLASS)
then there is no need to use static method Infront of those methods before which we are using @BeforeAll.. Because if we are changing the behavior of the test methods then in case of @TestInstance(TestInstance.Lifecycle.PER_CLASS) it will create one instance will be created. 






